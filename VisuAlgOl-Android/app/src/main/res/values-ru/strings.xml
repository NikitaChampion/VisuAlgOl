<resources>
    <string name="first_intro">Визуализация олимпиадных алгоритмов</string>
    <string name="app_name">Олимпиадные алгоритмы</string>
    <string name="about">Добро пожаловать в VisuAlgOl! Это приложение создано для изучения олимпиадных алгоритмов по информатике при поддержке лицея НИУ ВШЭ. Для продолжения нажмите на кнопку «Далее».</string>
    <string name="go_next">Далее</string>
    <string name="choose">Выберите алгоритм</string>

    <string name="sorting">Сортировки</string>
    <string name="sort_intro">Сортировка</string>
    <string name="stupid_sort">Глупая сортировка</string>
    <string name="bubble_sort">Сортировка пузырьком</string>
    <string name="selection_sort">Сортировка выбором</string>
    <string name="insertion_sort">Сортировка вставками</string>
    <string name="merge_sort">Сортировка слиянием</string>
    <string name="quick_sort">Быстрая сортировка</string>
    <string name="counting_sort">Сортировка подсчётом</string>

    <string name="search">Поиск</string>
    <string name="lin_search">Линейный поиск</string>
    <string name="bin_search">Бинарный поиск</string>
    <string name="ter_search">Тернарный поиск</string>

    <string name="recursion">Рекурсия</string>

    <string name="graphs">Графы</string>
    <string name="dfs">Обход в глубину</string>
    <string name="bfs">Обход в ширину</string>

    <string name="strings">Строки</string>
    <string name="prefix">Префикс-функция</string>
    <string name="z">Z-функция</string>


    <string name="what">Что это и для чего нужно?</string>

    <string name="whatIsSort">Что такое сортировка?</string>
    <string name="sort_introduction">Сортировка — последовательное расположение или разбиение на группы чего-либо в зависимости от выбранного критерия. Часто сортировка предпринимается для того, чтобы облегчить последующий поиск элементов в отсортированном множестве. К примеру, людей в школе на уроках физкультуры и в армии строят по росту, чтобы соблюдался порядок.</string>
    <string name="soldiers">Солдаты выстроились в ряд</string>
    <string name="sort_stupid">Выше представлен простейший учебный алгоритм сортировки низкой эффективности: он проходит по искомому массиву, сравнивает соседние элементы и, если порядок в их паре неверный, меняет их и возвращается в начало массива, после чего повторяет все те же действия. Алгоритм завершается, если во время полного обхода он не обнаруживает ни одной неотсортированной пары.</string>

    <string name="sort_bub">Сортировка пузырьком — простой алгоритм сортировки, который на каждом шаге обходит массив от начала до конца, сравнивая значения соседних ячеек и меняя их, если порядок в их паре неверный. Таким образом, в результате каждого прохода как минимум один элемент (максимальный среди неотсортированных) встаёт на своё место. Этот алгоритм считается учебным и практически не применяется вне учебной литературы, так как эффективен лишь для небольших массивов. Вместо него на практике применяются более эффективные алгоритмы сортировки.</string>

    <string name="sort_sel">Сортировка выбором — простой алгоритм сортировки, который обходит массив от начала до конца, на каждом i-ом шаге с помощью линейного поиска находит i-ый минимальный элемент и меняет его местами с первым элементом в неотсортированной части массива (i-ым элементом). Таким образом будет получен массив, отсортированный по неубыванию.</string>

    <string name="sort_ins">Сортировка вставками — алгоритм сортировки, в котором элементы входной последовательности просматриваются по одному, и каждый новый поступивший элемент с помощью линейного поиска размещается в подходящее место среди ранее упорядоченных элементов.</string>

    <string name="sort_mer">Сортировка слиянием — алгоритм сортировки, в котором используется принцип «разделяй и властвуй»: задача разбивается на несколько подзадач меньшего размера, которые решаются по отдельности, после чего их решения комбинируются для получения решения исходной задачи. Конкретно процедуру сортировки слиянием можно описать следующим образом:\n1. Если в рассматриваемом массиве один элемент, то он уже отсортирован — алгоритм завершает работу.\n2. Иначе массив разбивается на две части, которые сортируются рекурсивно.\n3. После сортировки двух частей массива к ним применяется процедура слияния, которая по двум отсортированным частям получает исходный отсортированный массив.</string>

    <string name="sort_q">Быстрая сортировка — алгоритм сортировки, в котором используется принцип «разделяй и властвуй»: задача разбивается на несколько подзадач меньшего размера, которые решаются по отдельности, после чего их решения комбинируются для получения решения исходной задачи. Конкретно процедуру быстрой сортировки можно описать следующим образом:\n1. В массиве выбирается опорный элемент.\n2. Сравниваются все остальные элементы с опорным и переставляются в массиве так, чтобы разбить массив на три непрерывных отрезка, следующие друг за другом: «меньшие опорного», «равные» и «большие»\n3. Отрезки «меньших» и «больших» значений сортируются с помощью рекурсивного вызова процедуры быстрой сортировки, если их длина больше единицы.\n4. Поскольку они сортируются на месте, для их объединения не требуются никакие действия: весь массив оказывается отсортированным.</string>

    <string name="sort_cou">Сортировка подсчётом — алгоритм сортировки, в котором используется диапазон целых чисел сортируемого массива для подсчёта совпадающих элементов. Применение сортировки подсчётом целесообразно лишь тогда, когда сортируемые числа имеют диапазон возможных значений, который достаточно мал по сравнению с сортируемым множеством. Конкретно процедуру быстрой сортировки можно описать следующим образом: создадим массив размера r – l, где l – минимальный, а r – максимальный элемент массива. После этого пройдем по искомому массиву и подсчитаем количество вхождений каждого элемента. Теперь можно пройти по массиву значений и выписать каждое число столько раз, сколько нужно.</string>

    <string name="lin_s">Линейный поиск — алгоритм нахождения заданного значения произвольной функции (в том числе и значения массива) на некотором отрезке, осуществляемый путём последовательного сравнения очередного рассматриваемого значения с искомым до тех пор, пока эти значения не совпадут (с той или иной точностью). Данный алгоритм является простейшим алгоритмом поиска и, в отличие, например, от двоичного поиска, не накладывает никаких ограничений на функцию и имеет простейшую реализацию.</string>

    <string name="bin_s">Бинарный поиск — алгоритм поиска значения отсортированного массива, осуществляемый путём дробления массива на половины. Его процедуру можно описать следующим образом:\n Мы определяем значение элемента посередине, между границами, и сравниваем его с искомым. Если искомое значение больше значения середины, то мы сужаем область поиска так, чтобы новая левая граница была равна индексу середины предыдущей области. В противном случае присваиваем это значение правой границе. Проделываем эту процедуру до тех пор, пока правая граница больше левой более чем на 1.</string>

    <string name="dfs_">Обход в глубину — один из основных методов обхода графа, являющийся основой для многих важных алгоритмов для работы с графами. Обход в глубину, как и следует из названия, идёт «вглубь» графа, насколько это возможно. Алгоритм этого обхода описывается рекурсивно: мы перебираем все исходящие из рассматриваемой вершины рёбра. Если ребро ведёт в вершину, которая не была рассмотрена ранее, то запускаем алгоритм от этой нерассмотренной вершины, а после возвращаемся и продолжаем перебирать рёбра. Возврат происходит только в том случае, если в рассматриваемой вершине не осталось рёбер, которые ведут в нерассмотренную вершину. Если после завершения алгоритма не все вершины были рассмотрены, то необходимо запустить алгоритм от одной из нерассмотренных вершин.</string>

    <string name="bfs_">Обход в ширину — один из основных методов обхода графа, являющийся основой для многих важных алгоритмов для работы с графами. Обход в ширину, как и следует из названия, «расширяется», насколько это возможно. Алгоритм этого обхода описывается следующим образом: мы перебираем все исходящие из рассматриваемой вершины рёбра. Если ребро ведёт в вершину, которая не была рассмотрена ранее, то помещаем эту вершину в очередь. После того, как мы перебрали все исходящие из вершины рёбра, то запускаем алгоритм от первой вершины в очереди.</string>

    <string name="prefix_fun">Префикс-функция — длина наибольшего префикса строки, который одновременно является её суффиксом. Определим префикс-функцию от строки s в позиции i следующим образом:\n π(s,i) = max {k ∣ s[0 … k] = s[i−k … i]}</string>

    <string name="z_fun">Z-функция — длина наибольшего префикса подстроки, начинающейся с позиции x в строке s, который одновременно является и префиксом всей строки. Определим z-функцию от строки s следующим образом:\n z[i](s) = max {k ∣ s[i … i+k] = s[0 … k]}</string>

    <string name="basic_sort2">.....................</string>
    <string name="generate">Сгенерировать</string>
    <string name="run">Запустить</string>
    <string name="nothingToShow">.....................</string>
    <string name="one">1</string>
    <string name="symbol">a</string>
    <string name="answer">Ответ:</string>
    <string name="check">Проверить</string>
    <string name="task">Задача</string>
    <string name="sec">1.25 sec</string>

    <string name="task1">Отсортируйте следующий массив чисел по возрастанию:\n2 1 3</string>
    <string name="task2">Определите, сколько обменов сделает алгоритм пузырьковой сортировки по возрастанию для данного массива:\n4 1 5 3</string>
    <string name="task3">Определите, как будет выглядеть следующий массив после двух обменов сортировки выбором:\n4 1 2 3</string>
    <string name="task4">Определите, как будет выглядеть следующий массив после двух обменов сортировки вставками:\n4 3 2 1</string>
    <string name="task5">Определите, как будет выглядеть следующий массив после двух действий сортировки слиянием:\n4 1 3 4 5 6 4 5</string>
    <string name="task6">Определите, как будет выглядеть следующий массив после одного обмена быстрой сортировки:\n4 3 2 1</string>
    <string name="task7">Определите, сколько действий сделает алгоритм сортировки подсчётом, чтобы отсортировать следующий массив:\n1 2 4 6</string>
    <string name="task8">Определите, сколько действий потребуется, чтобы линейным поиском в массиве\n7 2 5 1 8 4 3 8\nнайти элемент\n8</string>
    <string name="task9">Определите, сколько действий потребуется, чтобы бинарным поиском в массиве\n1 2 3 4 5 6 7 8\nнайти элемент\n8</string>
    <string name="task10">Определите, сколько будет посещено вершин поиском в глубину в графе на рисунке из вершины 8 перед вершиной 5</string>
    <string name="task11">Определите, сколько будет посещено вершин поиском в ширину в графе на рисунке из вершины 8 перед вершиной 5</string>
    <string name="task12">Как будет выглядеть префикс-функция от строки abacaba в позиции 6 (нумерация с 0)</string>
    <string name="task13">Как будет выглядеть z-функция от строки abacaba в позиции 6 (нумерация с 0)</string>
</resources>